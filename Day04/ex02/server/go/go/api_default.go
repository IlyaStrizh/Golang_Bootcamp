/*
 * Candy Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	// #include "ask_cow.h"
	"C"
	"errors"
	"fmt"
	"net/http"
	"unsafe"

	"github.com/gin-gonic/gin"
)

type DefaultAPI struct {
	price int32
}

// Post /buy_candy
func (api *DefaultAPI) BuyCandy(c *gin.Context) {
	// Your handler implementation
	var input BuyCandyRequest
	if err := c.BindJSON(&input); err != nil {
		c.AbortWithStatusJSON(http.StatusBadRequest, BuyCandy400Response{Error: err.Error()})
		return
	}
	if err := api.checkInput(&input); err != nil {
		c.AbortWithStatusJSON(http.StatusBadRequest, BuyCandy400Response{Error: err.Error()})
		return
	}
	change := input.Money - api.price*input.CandyCount
	if change < 0 {
		resStr := fmt.Sprintf("You need %v more money!", change*(-1))
		c.AbortWithStatusJSON(http.StatusPaymentRequired, BuyCandy400Response{Error: resStr})
		return
	}
	str := C.CString("Thank you!")
	res := C.ask_cow(str)
	c.JSON(http.StatusCreated, BuyCandy201Response{Change: change, Thanks: C.GoString(res)})
	C.free(unsafe.Pointer(res))
}

func (api *DefaultAPI) checkInput(input *BuyCandyRequest) error {
	if input.Money < 0 {
		return errors.New("incorrectly input (Money less 0)")
	}
	if input.CandyCount < 0 {
		return errors.New("incorrectly input (CandyCount less 0)")
	}
	return api.checkCandyType(input)
}

func (api *DefaultAPI) checkCandyType(input *BuyCandyRequest) error {
	switch input.CandyType {
	case "CE":
		api.price = 10
		return nil
	case "AA":
		api.price = 15
		return nil
	case "NT":
		api.price = 17
		return nil
	case "DE":
		api.price = 21
		return nil
	case "YR":
		api.price = 23
		return nil
	}
	return errors.New("incorrectly input (CandyType)")
}
